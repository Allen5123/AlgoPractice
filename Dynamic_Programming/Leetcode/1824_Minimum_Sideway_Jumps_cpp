//2021/9/9
class Solution {
public:
    int minSideJumps(vector<int>& obstacles) {
        int n = obstacles.size();
        vector<vector<int>> dp(3, vector<int>(n, 0));
        dp[0][0] = dp[2][0] = 1;
        dp[1][0] = 0;
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (obstacles[i] == j + 1) {
                    dp[j][i] = INT_MAX;
                }
                else {
                    dp[j][i] = min({
                            dp[j][i-1], 
                            (dp[(j+1)%3][i-1] < INT_MAX && obstacles[i] != (j+1)%3+1) ? dp[(j+1)%3][i-1]+1 : INT_MAX,
                            (dp[(j+2)%3][i-1] < INT_MAX && obstacles[i] != (j+2)%3+1) ? dp[(j+2)%3][i-1]+1 : INT_MAX
                    });
                }
            }
        }
        return min({dp[0][n-1], dp[1][n-1], dp[2][n-1]});
    }
};